"""
Exemple avanc√© du syst√®me RAG
============================

Cet exemple montre des fonctionnalit√©s avanc√©es :
- Reranking hybride
- Traitement par lots
- Gestion des m√©tadonn√©es
- Optimisation des performances
"""

import os
import sys
import time
from pathlib import Path
from typing import List, Dict, Any

# Ajouter le r√©pertoire src au path
sys.path.append(str(Path(__file__).parent.parent / "src"))

from rag.core import RAGSystem
from rag.embeddings import HybridEmbeddingProvider, EmbeddingManager
from rag.retrieval import HybridReranker
from rag.ocr import DocumentOCRProcessor
from rag.utils import TextProcessor, create_splitter
from rag.utils.config import config


def advanced_rag_setup():
    """Configuration avanc√©e du syst√®me RAG"""
    
    print("üöÄ Configuration avanc√©e du syst√®me RAG...")
    
    # 1. Fournisseur d'embeddings hybride
    hybrid_embedding = HybridEmbeddingProvider(
        primary_provider="mistral"
    )
    
    # 2. Gestionnaire d'embeddings avec cache
    embedding_manager = EmbeddingManager(hybrid_embedding)
    
    # 3. Reranker hybride
    hybrid_reranker = HybridReranker()
    
    # 4. Processeur de texte avanc√©
    advanced_splitter = create_splitter("sentence", chunk_size=512, chunk_overlap=100)
    text_processor = TextProcessor(splitter=advanced_splitter)
    
    # 5. Processeur OCR avanc√©
    ocr_processor = DocumentOCRProcessor()
    
    # 6. Syst√®me RAG complet
    rag_system = RAGSystem(
        embedding_provider=embedding_manager,
        reranker=hybrid_reranker,
        text_processor=text_processor,
        ocr_processor=ocr_processor.ocr_processor,
        generation_provider="mistral"
    )
    
    return rag_system


def batch_document_processing(rag_system: RAGSystem):
    """Traitement par lots de documents"""
    
    print("\nüìö Traitement par lots de documents...")
    
    # Documents de test
    documents = [
        {
            "content": "L'intelligence artificielle transforme de nombreux secteurs d'activit√©. Elle permet d'automatiser des t√¢ches complexes et d'am√©liorer la prise de d√©cision.",
            "metadata": {"category": "technologie", "language": "fr", "source": "article_1"}
        },
        {
            "content": "Le machine learning utilise des algorithmes pour apprendre √† partir de donn√©es. Il est particuli√®rement efficace pour la reconnaissance d'images et le traitement du langage naturel.",
            "metadata": {"category": "technologie", "language": "fr", "source": "article_2"}
        },
        {
            "content": "Les r√©seaux de neurones profonds ont r√©volutionn√© l'IA. Ils permettent de r√©soudre des probl√®mes qui √©taient auparavant impossibles √† traiter.",
            "metadata": {"category": "technologie", "language": "fr", "source": "article_3"}
        },
        {
            "content": "L'√©thique de l'IA est un enjeu majeur. Il faut s'assurer que les syst√®mes d'IA sont √©quitables, transparents et respectueux de la vie priv√©e.",
            "metadata": {"category": "√©thique", "language": "fr", "source": "article_4"}
        },
        {
            "content": "L'IA g√©n√©rative comme ChatGPT peut cr√©er du contenu textuel de qualit√©. Elle ouvre de nouvelles possibilit√©s cr√©atives et professionnelles.",
            "metadata": {"category": "applications", "language": "fr", "source": "article_5"}
        }
    ]
    
    # Ajouter les documents
    start_time = time.time()
    document_ids = rag_system.add_documents(documents)
    processing_time = time.time() - start_time
    
    print(f"‚úÖ {len(document_ids)} documents trait√©s en {processing_time:.2f}s")
    return document_ids


def advanced_querying(rag_system: RAGSystem):
    """Requ√™tes avanc√©es avec diff√©rents param√®tres"""
    
    print("\nüîç Requ√™tes avanc√©es...")
    
    queries = [
        {
            "query": "Quels sont les avantages de l'intelligence artificielle ?",
            "top_k": 3,
            "use_reranking": True
        },
        {
            "query": "Comment fonctionne le machine learning ?",
            "top_k": 2,
            "use_reranking": False
        },
        {
            "query": "Quels sont les enjeux √©thiques de l'IA ?",
            "top_k": 2,
            "use_reranking": True
        }
    ]
    
    for i, query_config in enumerate(queries, 1):
        print(f"\nüìù Requ√™te {i}: {query_config['query']}")
        
        try:
            start_time = time.time()
            
            # R√©cup√©ration avec param√®tres
            documents = rag_system.retrieve_documents(
                query_config['query'],
                top_k=query_config['top_k'],
                use_reranking=query_config['use_reranking']
            )
            
            retrieval_time = time.time() - start_time
            
            print(f"üìö {len(documents)} documents r√©cup√©r√©s en {retrieval_time:.2f}s")
            
            # Afficher les scores de similarit√©
            for j, doc in enumerate(documents):
                score = doc.get('similarity_score', doc.get('rerank_score', 0))
                source = doc.get('source', 'unknown')
                print(f"  üìÑ Document {j+1}: {source} (score: {score:.3f})")
            
            # G√©n√©ration de r√©ponse
            start_time = time.time()
            response = rag_system.generate_response(query_config['query'], documents)
            generation_time = time.time() - start_time
            
            print(f"üí¨ R√©ponse ({generation_time:.2f}s): {response}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la requ√™te {i}: {str(e)}")


def performance_analysis(rag_system: RAGSystem):
    """Analyse des performances du syst√®me"""
    
    print("\nüìä Analyse des performances...")
    
    # Test de performance avec diff√©rentes tailles de requ√™tes
    test_queries = [
        "Qu'est-ce que l'IA ?",
        "Expliquez le machine learning et ses applications",
        "Quels sont les d√©fis √©thiques de l'intelligence artificielle dans la soci√©t√© moderne ?"
    ]
    
    results = []
    
    for query in test_queries:
        start_time = time.time()
        
        try:
            # R√©cup√©ration
            documents = rag_system.retrieve_documents(query, top_k=3)
            retrieval_time = time.time() - start_time
        
            # G√©n√©ration
            start_gen = time.time()
            response = rag_system.generate_response(query, documents)
            generation_time = time.time() - start_gen
            
            total_time = time.time() - start_time
            
            results.append({
                'query': query,
                'query_length': len(query),
                'retrieval_time': retrieval_time,
                'generation_time': generation_time,
                'total_time': total_time,
                'response_length': len(response),
                'num_documents': len(documents)
            })
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test de performance: {str(e)}")
    
    # Afficher les r√©sultats
    print("\nüìà R√©sultats de performance:")
    print(f"{'Requ√™te':<20} {'Temps total':<12} {'R√©cup√©ration':<12} {'G√©n√©ration':<12} {'Documents':<10}")
    print("-" * 80)
    
    for result in results:
        print(f"{result['query'][:18]:<20} "
              f"{result['total_time']:.2f}s{'':<8} "
              f"{result['retrieval_time']:.2f}s{'':<8} "
              f"{result['generation_time']:.2f}s{'':<8} "
              f"{result['num_documents']:<10}")


def metadata_filtering_example(rag_system: RAGSystem):
    """Exemple de filtrage par m√©tadonn√©es"""
    
    print("\nüîç Exemple de filtrage par m√©tadonn√©es...")
    
    # Simuler un r√©cup√©rateur avec filtres
    if hasattr(rag_system.vector_retriever, 'search_similar'):
        try:
            # Recherche avec filtre par cat√©gorie
            documents = rag_system.vector_retriever.search_similar(
                "intelligence artificielle",
                top_k=5,
                filters={"metadata->category": "technologie"}
            )
            
            print(f"üìö {len(documents)} documents trouv√©s dans la cat√©gorie 'technologie'")
            
            for doc in documents:
                metadata = doc.get('metadata', {})
                category = metadata.get('category', 'unknown')
                source = metadata.get('source', 'unknown')
                print(f"  üìÑ {source} (cat√©gorie: {category})")
                
        except Exception as e:
            print(f"‚ÑπÔ∏è  Filtrage par m√©tadonn√©es non disponible: {str(e)}")


def main():
    """Fonction principale de l'exemple avanc√©"""
    
    print("üéØ Syst√®me RAG Avanc√© - Mistral, OpenAI, Supabase, Cohere")
    print("=" * 70)
    
    try:
        # Configuration avanc√©e
        rag_system = advanced_rag_setup()
        print("‚úÖ Syst√®me RAG avanc√© initialis√©")
        
        # Traitement par lots
        document_ids = batch_document_processing(rag_system)
        
        # Requ√™tes avanc√©es
        advanced_querying(rag_system)
        
        # Analyse des performances
        performance_analysis(rag_system)
        
        # Filtrage par m√©tadonn√©es
        metadata_filtering_example(rag_system)
        
        # Informations du syst√®me
        print("\nüìä Informations du syst√®me:")
        system_info = rag_system.get_system_info()
        for key, value in system_info.items():
            print(f"  {key}: {value}")
        
        print("\nüéâ Exemple avanc√© termin√© avec succ√®s !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'ex√©cution: {str(e)}")
        print("üí° V√©rifiez votre configuration et vos cl√©s API")


if __name__ == "__main__":
    main()
