#!/usr/bin/env python3
"""
Script d'installation des d√©pendances
=====================================

Ce script installe toutes les d√©pendances n√©cessaires pour le syst√®me RAG.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} termin√©")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description}: {e}")
        print(f"Sortie: {e.stdout}")
        print(f"Erreur: {e.stderr}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de la version Python...")
    
    version = sys.version_info
    if version >= (3, 8):
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Version 3.8+ requise")
        return False

def install_python_dependencies():
    """Installe les d√©pendances Python"""
    print("\nüì¶ Installation des d√©pendances Python...")
    
    # V√©rifier que requirements.txt existe
    requirements_path = Path("requirements.txt")
    if not requirements_path.exists():
        print("‚ùå Fichier requirements.txt non trouv√©")
        return False
    
    # Installer les d√©pendances
    return run_command(
        f"{sys.executable} -m pip install -r requirements.txt",
        "Installation des d√©pendances Python"
    )

def install_system_dependencies():
    """Installe les d√©pendances syst√®me"""
    print("\nüîß Installation des d√©pendances syst√®me...")
    
    # D√©tecter le syst√®me d'exploitation
    import platform
    system = platform.system().lower()
    
    if system == "darwin":  # macOS
        print("üçé D√©tection macOS")
        commands = [
            ("brew install tesseract", "Installation Tesseract OCR"),
            ("brew install poppler", "Installation Poppler"),
        ]
    elif system == "linux":
        print("üêß D√©tection Linux")
        commands = [
            ("sudo apt-get update", "Mise √† jour des paquets"),
            ("sudo apt-get install -y tesseract-ocr tesseract-ocr-fra poppler-utils", "Installation Tesseract et Poppler"),
        ]
    else:
        print(f"‚ö†Ô∏è  Syst√®me {system} d√©tect√© - Installation manuelle requise")
        print("üí° Installez manuellement :")
        print("   - Tesseract OCR")
        print("   - Poppler")
        return True
    
    # Ex√©cuter les commandes
    for command, description in commands:
        if not run_command(command, description):
            print(f"‚ö†Ô∏è  {description} √©chou√© - Continuez manuellement")
    
    return True

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    print("\nüìÅ Cr√©ation des r√©pertoires...")
    
    directories = [
        "logs",
        "data",
        "cache",
        "chroma_db"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ R√©pertoire {directory} cr√©√©")
    
    return True

def setup_environment():
    """Configure l'environnement"""
    print("\nüîß Configuration de l'environnement...")
    
    # Copier env.example vers .env si n√©cessaire
    env_path = Path(".env")
    if not env_path.exists():
        env_example_path = Path("env.example")
        if env_example_path.exists():
            import shutil
            shutil.copy(env_example_path, env_path)
            print("‚úÖ Fichier .env cr√©√© √† partir de env.example")
        else:
            print("‚ùå Fichier env.example non trouv√©")
            return False
    else:
        print("‚úÖ Fichier .env existe d√©j√†")
    
    return True

def test_installation():
    """Teste l'installation"""
    print("\nüß™ Test de l'installation...")
    
    # Test des modules Python
    test_modules = [
        "mistralai",
        "openai", 
        "cohere",
        "supabase",
        "langchain",
        "pytesseract",
        "easyocr",
        "dotenv"
    ]
    
    failed_modules = []
    for module in test_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} OK")
        except ImportError:
            print(f"‚ùå {module} manquant")
            failed_modules.append(module)
    
    if failed_modules:
        print(f"\n‚ö†Ô∏è  Modules manquants : {', '.join(failed_modules)}")
        print("üí° R√©essayez : pip install -r requirements.txt")
        return False
    
    print("‚úÖ Tous les modules Python sont install√©s")
    return True

def main():
    """Fonction principale"""
    print("üöÄ Installation du Syst√®me RAG")
    print("=" * 40)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        return False
    
    # Installation des d√©pendances Python
    if not install_python_dependencies():
        print("‚ùå √âchec de l'installation des d√©pendances Python")
        return False
    
    # Installation des d√©pendances syst√®me
    if not install_system_dependencies():
        print("‚ö†Ô∏è  Certaines d√©pendances syst√®me n'ont pas pu √™tre install√©es")
        print("üí° Installez-les manuellement si n√©cessaire")
    
    # Cr√©ation des r√©pertoires
    if not create_directories():
        print("‚ùå Erreur lors de la cr√©ation des r√©pertoires")
        return False
    
    # Configuration de l'environnement
    if not setup_environment():
        print("‚ùå Erreur lors de la configuration de l'environnement")
        return False
    
    # Test de l'installation
    if not test_installation():
        print("‚ùå Installation incompl√®te")
        return False
    
    print("\nüéâ Installation termin√©e avec succ√®s !")
    print("\nüìã Prochaines √©tapes :")
    print("1. Configurez vos cl√©s API : python scripts/setup_quick.py")
    print("2. V√©rifiez la configuration : python scripts/check_api_keys.py")
    print("3. Testez le syst√®me : python examples/basic_rag_example.py")
    print("\nüìö Consultez docs/ pour plus d'informations")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
